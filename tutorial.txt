
let TUTORIAL = `
<h2>Language Tutorial</h2>
<h3>Definitions</h3>

In Volsung, definitions are used to create objects to be used as verteces in the DSP graph, and constants which can be used to initialize those objects. A standalone definition is always an identifier chosen by the user, followed by a colon, followed by the value to be stored with that identifier:
<pre>id: value</pre>
In the case of an object definition, the value is an object literal. An object literal is the type of an object, followed by a tilde, followed by its parameters. Object types are always suffixed with tilde characters <code>~</code>, to separate them from other identifiers. Constants can also be defined, and on the right hand side of a constant definition should be an expression from which the type and value of the constant can be inferred:
<pre>frequency: 440\nmy_oscillator: Sine_Oscillator~ frequency</pre>

The above code creates a constant <code>frequency</code> and an oscillator which can later be referred to using its identifier <code>my_oscillator</code>.
The constant is also used as the first parameter in the object definition, which is the frequency of the sine oscillator in the case of the <code>Sine_Oscillator~</code> type of object. Different object types will process their parameters and input data differently, and produce different output data.

<br/><br/><h3>Expressions and sequences</h3>
The constant from the above code also has the <code>Number</code> data-type associated with it, as it has been inferred from the expression '<code>440</code>'. The other two currently-available data-types are <code>Text</code> and <code>Sequence</code>. Sequence literals consist of curly braces, encapsulating a list of comma separated expressions which evaluate to Numbers:
<pre>my_number: 100\nmy_sequence: { 0, my_number, 5ms/2, 4^(2/3), { 5 }[0] }</pre>
The final value consists of a sequence of one value, which has been subscripted with zero, extracting the first value (which leaves the number 5). Naturally, the basic arithmetic operators <code>+, -, *, /, ^</code> can be used to perform arithmetic on literals and identifiers of constants, with the expected associativity and precendence. The third value also uses the literal operator <code>ms</code>. This multiplies the value of the attached numeric literal by <code>fs / 1000</code>, converting from samples to milliseconds. You can also use the literal operator <code>s</code> to convert from samples to seconds.<br/>If a subexpression consisting of an arithmetic operator with a Number operand and a Sequence operand is evaluated, the resulting type is a Sequence, with the arithmetic operation performed on each of its values. Arithmetic sequences (those with a constant difference between consecutive terms) can also be created using shorthand sequence generators, with the following syntax: <code>start_value..end_value|step_size</code>. The vertical bar - step_size are optional, and the common difference will default to one:
<pre>; Results in { 1, 4, 9, 16 }\nsquares: (1..4)^2\n&log squares</pre>
Note that without the parentheses, the exponentiation would take precendence over the sequence generation operator, resulting in a sequence with the numbers 1 through 16. Also notice that both start and end values are inclusive.
Sequences can also be subscript with other sequences. In this case, the second sequence is used as a set of indices into the first sequence, returning a third. Here's an example:
<pre>; Results in { 100, 200, 300, 200, 100 }\nhundreds: { 100, 200, 300, 400 }\n&log hundreds[{ 0, 1, 2, 1, 0 }]</pre>

<br/><br/><h3>Connections</h3>
Once several objects have been created, they can be connected together to form a graph. The basic connection operator <code>-></code> connects two objects together. In the following example, a sine wave signal is generated, attenuated by a factor of 0.5 (6 decibels) and the data is written to a file on disk:
<pre>source: Sine_Oscillator 440\ndisk: File~ "output.raw"\ngain: Multiply~ 0.5\nsource -> gain -> disk</pre>
Be aware that the File~ object is not able to write files in the browser-based interpreter, and can only access the preloaded files in <code>files/</code>. See the vocoder demo for an example.<br/>Instead of declaring every individual object, objects can also be created inline, within a connection statement using just object literals. These objects will be anonymous, and cannot be referred to again later in the program:
<pre>Sine_Oscillator~ 440 -> *0.5 -> File~ "output.raw"</pre>
This style of programming is also less descriptive, as objects do not have names describing their role in the processing graph. Notice the use of an asterisk as a shorthand for a <code>Multiply~</code> object. Basic arithmetic objects can be created inline using arithmetic operators as a shorthand. The code above multiplies a signal by a constant. In order to multiply two signals (performing ring modulation), we need to supply a second input signal to the <code>Multiply~</code> object. Using the second input port of the <code>Multiply~</code> object overrides the constant parameter provided as a multiplier, and we won't provide one for this reason. To specify which input or output port on an object a connection should go to and from, use an integral index and a vertical bar:
<pre>ringmod: Multiply~\n\nSine_Oscillator~ 300 -> ringmod\nSine_Oscillator~ 50 -> 1|ringmod -> output</pre>
Input port and output port indices default to 0. Therefore, all the programs we have written before just use the input and output port 0 on all connections. 
<pre>; These two lines of code are equivalent\nsource   -> gain     -> disk\nsource|0 -> 0|gain|0 -> 0|disk</pre>
Also notice the use of the <code>output</code> object, without it having been defined. This is an ambient object which is created before the main code is interpreted. Which ambient objects are available depends on the front-end environment the language is running in and also your hardware configuration. A language front-end, such as a VST plugin or standalone software, should normally be implemented such that there is one input port on the output object for each audio output channel that is available.

<br/><br/><h3>Groups</h3>
A Group in Volsung is an abstraction that allows you to define many objects of the same type and address them as one object. They can also be indexed, and are slightly analogous to arrays in many high level general purpose languages. Here is the basic syntax for group definitions:
<pre>identifier: [5] Type~ parameter</pre>
This creates five objects of type <code>type</code>. As in a regular object definition, a comma delimited list of expressions can be used to initialize parameters on the objects. However in the case of groups, a symbol <code>n</code> is implicitly introduced, which always holds the index of the object currently being initialized, starting from 1. One way to address and connect these objects in the group is to subscript the group:
<pre>bank: [5] Sine_Oscillator~ 440\nbank[0] -> output</pre>
However, the true usefulness comes from being able to connect them up in one go. In order to allow terse connection statements involving entire groups, a few new explicit arrow operators are introduced:
<pre>a >> b ; Many-to-one
a => b ; Many-to-many (parallel)
a <> b ; One-to-many
a x> b ; Biclique connection
</pre>
Respectively, these can be used to connect each object in a group to one object, connect each object in a group to each object in another group, connect an object to each object in a group, or to connect every object in one group to every object in another. Naturally, groups can also be created anonymously in a connection statement.

<br/><br/><h3>Subgraphs</h3>
Subgraphs are a way of creating custom object types. Sometimes, a certain subset of the processing graph should be grouped together, either to allow code reuse and to avoid repetition, or to create a semantic unit for clarity and readability. Instances of subgraphs are somewhat analogous to objects in object oriented programming, since they can be used for grouping together data and its behaivour. Subgraph types can be defined using a name followed by a pair of comma separated expressions in a pair of angle brackets, to specify the number of inputs and outputs, in addition to a block of brace-enclosed Volsung code on the right-hand-side of a definition:
<pre>My_Subgraph <0, 1>: {
    Sine_Oscillator~ _1 -> *_2 -> output
}
</pre>
<code>_1</code> and <code>_2</code> are symbols into which the positional parameters of the object definition are substituted. Thereby, the above code creates an oscillator for which both the volume and the frequency can be specified using parameters. The new custom object type can now be used like any regular built-in object: <code>My_Subgraph~ 440, 0.5 -> output</code>. Definitions which are outside the subgraph are not visible from within, so any data which needs to be moved into-or-out-of the subgraph has to use the <code>input</code> and <code>output</code> objects which are created implicitly. These io objects have a number of ports as specified on the left-hand-side of the subgraph definition. The subgraph above has no output ports on the <code>input</code> object, and one input port on the <code>output</code> object.

<br/><br/><h3>Directives</h3>
The web interpreter provides a few special directives, which can be accessed using the ampersand character <code>&</code>. <code>&stereo</code> will make the program output stereo, and <code>&length</code> expects an expression describing the length of audio playback in samples.
<pre>&stereo
&length 4s
Sine_Oscillator~ 400 -> 0|output
Sine_Oscillator~ 500 -> 1|output
</pre>

<br/>
That's all for now. More language features, performance improvements, documentation, and front-ends will be added soon. Please <a href="mailto:landahl2014@gmail.com">contact me</a> with problems, suggestions, criticisms.<br/><br/>
`;
